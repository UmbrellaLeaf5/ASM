Ассемблирование и компоновка

$ gcc -Og -g -o p -v main.c swap.c
                (verbose)

flag -I path/to/include - extend standard library

[main.c]    [swap.c]
    (препроцессор)
      компиляция
        (CC1)
    |          |
    V          V

[main.s]    [swap.s]
   ассемблирование
        (as)
    |          |
    V          V

[main.o]    [swap.o]    (перемещаемые объектные файлы)
     компоновка         [библиотеки]
     (collect2)
    \           /
     \         /
      _/     \_
        [exe]
(lto-wrapper - windows thing)
(Временные объектные файлы находятся в C:\Users\user_name\AppData\Local\Temp)

__________________________________________________________________________________

CMake

Хэдеры - через препроцессинг

-L path/to/lib

__________________________________________________________________________________

ELF = Executable and Linkable Format
____________________
ELF header          |
.text               |
.rodata             |   - здесь хранится таблица перехода для switch
.bss                |   better-save-space
.symtab             |
.rel.text           |   relocation
.rel.data           |
.debug              |   -g
.line               |
.strlab             |
section header table|
____________________|

static
namespace
{
    ...
}

__________________________________________________________________________________

Таблица символов

struct Elf_Symbol
{
    int name;
    int value;
    int size; 

    char type:4,  - битовые поля
    binding: 4;   - по 4 бита

    char reserved;
    char section;
};

__________________________________________________________________________________

$ readelf --syms main.o swap.o
$ gcc -Og -g -o p -save-temps main.c swap.C
$ ls p-main.o p-swap.o
$ objdump --syms main.o swap.o

Символ      запись в swap.o .symtab?    тип символа     модуль где определён        сегмент
buf                  да                   внешний            main.o                  undef
bufp0                да                  глобальный          swap.o                  rel.data
bufp1                да                  глобальный          swap.o                   .bss
swap                 да                  глобальный          swap.o                   .text
tmp                  нет                     -                    -                     -

NOTYPE - внешний

__________________________________________________________________________________

Ассемблирование

    jmp .L1     опережающая ссылка
.L1:
                поэтому ассемблирование
                выполняется в 2 прохода

глобальная переменная:
a:
    .quad 58
    .byte 'a'
    .string "..."
$a - использовать значение

arr:
    .zero   кол-во байт

-сформировать таблицу символов
-генерация кода
# -pipe

__________________________________________________________________________________

Компоновка

-разрешение ссылок
-перераспределение адресов

main.o                      swap.o
_________                   _____________
buf     |                   | bufp0     |
main    |                   | bufp1     |
________|                   |   swap    |

__________________________________________________________________________________

Загрузка на исполнение
        ________________________
2^48-1  |         Kernel        |
        |_______________________|
        |         stack         |
        |_______________________| <- %rsp
        |           |           |
        |           V           |
        |                       |
        |                       |
        |           ^           |
        |           |           |
        |_______________________| <- brk
        |         heap          |
        |_______________________|
        | Read/write segments   |
        | .data, .bss           |
        |_______________________|
        | Read_only segment     |
        | .text .rodata         |
        |_______________________|