Когда в архитектуре x86-64 процедуре требуется дополнительная память для сохранения данных,
не умещающихся в регистрах, она выделяет место в стеке. Эта область
называется кадром стека процедуры. 

Когда процедура P вызывает
процедуру Q, она помещает адрес возврата в стек, указывая место внутри P, с которого
программа должна продолжить выполнение после возврата из Q. 

Чтобы передать управление из функции P в функцию Q, достаточно записать в счетчик инструкций (Program Counter, PC) начальный адрес функции Q. Однако, когда позже
придет время выйти из Q, процессор должен знать, куда в P вернуть управление. В архитектуре x86-64 эта информация записывается при вызове процедуры Q инструкцией call Q. Эта инструкция помещает адрес A в стек и записывает в PC адрес начала Q.
Адрес A называется адресом возврата и вычисляется как адрес инструкции, следующей
сразу за инструкцией call. Соответствующая инструкция ret извлекает адрес A из стека
и записывает его в PC.
Ниже представлен обобщенный синтаксис инструкций call и ret:

Инструкция                  Описание
call Метка                  Вызов процедуры
call *Операнд               Вызов процедуры
ret                         Возврат из вызова процедуры

Таблица 3.13. Распределение регистров для передачи аргументов в функции. Регистры
используются в указанном порядке и именуются в соответствии с размерами аргументов
Размер операнда             Номер аргумента
(бит)
                            1       2       3       4       5       6
64                          %rdi    %rsi    %rdx    %rcx    %r8     %r9
32                          %edi    %esi    %edx    %ecx    %r8d    %r9d
16                          %di     %si     %dx     %cx     %r8w    %r9w
8                           %dil    %sil    %dl     %cl     %r8b    %r9b

Когда функция принимает более шести целочисленных аргументов, то 7-й
и все последующие аргументы передаются через стек. Предположим, что процедура P вызывает
процедуру Q, которая принимает n целочисленных аргументов,
причем n > 6. В этом случае P должна выделить кадр стека достаточно большой,
чтобы поместить в него аргументы с 7-го по n-й, как показано на рис. 3.3.
Она помещает аргументы 1–6 в соответствующие регистры, а аргументы с 7-го по n-й
сохраняет на стеке в обратном порядке так,
что 7-й аргумент оказывается на вершине стека. При передаче параметров через стек
все размеры данных округляются до кратных восьми.
Разместив аргументы, программа выполняет инструкцию call для передачи управления процедуре Q.
Процедура Q может получить свои аргументы из регистров и, если их больше 6, еще и из стека.
Если Q, в свою очередь, вызывает некоторую функцию, принимающую больше шести аргументов,
то она тоже может выделить для них место в своем кадре стека – в области, обозначенной
на рис. 3.3 как «Область для сборки аргументов».


Листинг 3.13. Пример определения и вызова процедуры. Вызываемый код должен выделить
место в кадре стека из-за наличия операторов взятия адреса
(a) Код на C функций swap_add и caller

long swap_add(long *xp, long *yp)
{
    long x = *xp;
    long y = *yp;
    *xp = y;
    *yp = x;
    return x + y;
}

long caller()
{
    long arg1 = 534;
    long arg2 = 1057;
    long sum = swap_add(&arg1, &arg2);
    long diff = arg1 - arg2;
    return sum * diff;
}

(b) Ассемблерный код, сгенерированный для функции caller

 long caller()

caller:                     ______________________________________
    subq $16, %rsp          ||| Выделить 16 байт в кадре стека |||
    movq $534, (%rsp)       ||| Сохранить 534 в arg1           |||
    movq $1057, 8(%rsp)     |||_Сохранить_1057_в_arg2__________|||
    leaq 8(%rsp), %rsi      Вычислить &arg2 для второго аргумента
    movq %rsp, %rdi         Вычислить &arg1 для первого аргумента
    call swap_add           Вызвать swap_add(&arg1, &arg2)
    movq (%rsp), %rdx       Получить arg1
    subq 8(%rsp), %rdx      Вычислить diff = arg1 - arg2
    imulq %rdx, %rax        Вычислить sum * diff
    addq $16, %rsp          ||| Освободить память в кадре стека|||
    ret                     Возврат

__________________________________________________________________________________
__________________
|                |
| НАЧАЛО ПИЗДЕЦА |
|________________|

В качестве более сложного примера рассмотрим функцию call_proc в листинге 3.14,
иллюстрирующую многие аспекты использования стека в архитектуре x86-64. Несмотря
на большой объем этого примера, его стоит внимательно изучить. В нем демонстрируется функция, которая должна выделять память в стеке для локальных переменных, а также
вызвать другую функцию с 8 аргументами (листинг 3.12). Функция call_proc создает кадр
стека, как показано на рис. 3.6.

Листинг 3.14. Пример вызова функции proc из листинга 3.12. Этот код создает кадр стека
(a) Код на C функции call_proc

long call_proc()
{
    long x1 = 1; int x2 = 2;
    short x3 = 3; char x4 = 4;
    proc(x1, &x1, x2, &x2, x3, &x3, x4, &x4);
    return (x1+x2)*(x3-x4);
}

(b) Сгенерированный ассемблерный код
 long call_proc()
call_proc:
    Подготовка аргументов для вызова proc
    subq $32, %rsp Выделить кадр стека с размером 32 байта
    movq $1, 24(%rsp) Сохранить 1 в &x1
    movl $2, 20(%rsp) Сохранить 2 в &x2
    movw $3, 18(%rsp) Сохранить 3 в &x3
    movb $4, 17(%rsp) Сохранить 4 в &x4
    leaq 17(%rsp), %rax Создать &x4
    movq %rax, 8(%rsp) Сохранить &x4 в 8-м аргументе
    movl $4, (%rsp) Сохранить 4 в 7-м аргументе
    leaq 18(%rsp), %r9 Сохранить &x3 в 6-м аргументе
    movl $3, %r8d Сохранить 3 в 5-м аргументе
    leaq 20(%rsp), %rcx Сохранить &x2 в 4-м аргументе
    movl $2, %edx Сохранить 2 в 3-м аргументе
    leaq 24(%rsp), %rsi Сохранить &x1 во 2-м аргументе
    movl $1, %edi Сохранить 1 в 1-м аргументе

    call proc   Вызов proc

 Извлечение результатов из памяти
movslq 20(%rsp), %rdx Извлечь x2 и преобразовать в long
addq 24(%rsp), %rdx Вычислить x1+x2
movswl 18(%rsp), %eax Извлечь x3 и преобразовать в int
movsbl 17(%rsp), %ecx Извлечь x4 и преобразовать в int
subl %ecx, %eax Вычислить x3-x4
cltq Преобразовать в long
imulq %rdx, %rax Вычислить (x1+x2) * (x3-x4)
addq $32, %rsp Освободить память в кадре стека
ret Return