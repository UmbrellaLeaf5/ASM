Для кода на языке C

void cond(long a, long *p)
{
    if (p && a > *p)
    *p = a;
}

GCC сгенерировал следующий ассемблерный код:

    void cond(long a, long *p)
    a в %rdi, p в %rsi
cond:
    testq %rsi, %rsi
    je .L1
    cmpq %rdi, (%rsi)
    jge .L1
    movq %rdi, (%rsi)
.L1:
    rep; ret

1. Напишите goto-версию на С, которая выполняет те же вычисления и воспроизводит
управляющую логику программы на ассемблере подобно тому, как показано в листинге 3.3 (b).
Возможно, вы сочтете полезным снабдить эту версию комментариями, как
мы делали это в наших примерах.

2. Объясните, почему код на языке ассемблера содержит два условных перехода, тогда как
код на языке С – лишь один оператор if.

__________________________________________________________________________________

1.
void cond(long a, long *p)
{
    bool condition = p && a > *p;
    if (p == 0)
        goto done;
    if (a > *p)
        goto done;
    *p = a;
    done:
}

2. Потому что проверить два условия, перечисленных через "и" можно лишь
последовательно на уровне ассемблера (невозможно сделать в одну строчку)